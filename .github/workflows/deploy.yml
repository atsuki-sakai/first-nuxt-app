# GitHub Actions CI/CD パイプライン
# Google Cloud Run 自動デプロイ設定

on:
  pull_request:
    # Pull Request作成時にテストのみ実行（デプロイはしない）
    branches: [ main, master ]

env:
  # GCP プロジェクトID（GitHub Secrets から取得）
  # 設定場所: リポジトリ > Settings > Secrets > Actions
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

  # Google Artifact Registry のリージョン（東京リージョン）
  # コンテナイメージを保存するリージョンを指定
  GAR_LOCATION: asia-northeast1

  # Cloud Run サービス名（デプロイ先サービス名）
  # gcloud run deploy [SERVICE_NAME] で作成したサービス名と一致させる
  SERVICE: nuxt-app

  # Cloud Run デプロイリージョン（東京リージョン）
  # アプリケーションが実際に動作するリージョンを指定
  REGION: asia-northeast1

jobs:
  # =======================
  # テスト・品質チェックジョブ
  # =======================
  test:
    # 実行条件: Pull Request作成時のみ
    if: github.event_name == 'pull_request'
    # 実行環境: Ubuntu最新版
    runs-on: ubuntu-latest
    steps:
      # ステップ1: ソースコードのチェックアウト
      - name: Checkout
        uses: actions/checkout@v4

      # ステップ2: Node.js環境のセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          # Node.js バージョン: Dockerfile と同じバージョンを指定
          # Nuxt 4.1.2 の要件に合わせて Node.js 22.20.0 を使用
          node-version: '22.20.0'
          # npm キャッシュを有効化
          # 依存関係のインストール時間を短縮
          cache: 'npm'

      # ステップ3: 依存関係のインストール
      - run: npm ci

      # ステップ4: テストの実行
      - name: Run tests
        # package.json の test スクリプトを実行
        # Vitest または Jest などのテストランナーを実行
        run: npm run test

      # ステップ5: アプリケーションのビルド
      - name: Build application
        # Nuxt.js の本番ビルドを実行
        # ビルドエラーがないことを確認
        run: npm run build

      # ステップ6: Docker イメージビルドテスト
      - name: Docker build test
        # Docker イメージが正常にビルドできることを確認
        # 実際にプッシュはしないが、ビルドプロセスをテスト
        # 本番デプロイ前にDockerfile の構文エラー等を検出
        run: docker build -t test-image .
